{"version":3,"sources":["components/mainPage/mainPage.module.css","redux/store.js","redux/task/task.action-types.js","api/api.js","redux/user/user.reducer.js","redux/task/task.reducer.js","components/login/login.jsx","components/tasks/taskCard.jsx","components/tasks/createTaskForm.jsx","components/tasks/tasksContainer.jsx","components/mainPage/mainPage.jsx","App.js","index.js"],"names":["module","exports","store","TASK_ACTION_TYPES","SET_SORT_FIELD","SET_SORT_DIRECT","SET_PAGE_NUM","SET_TOTAL_TASK_COUNT","SET_TASKS","EDIT_TASK","TOGGLE_IS_FETCHING","instance","axios","baseURL","tasksAPI","currentPage","sort_filed","sortDr","get","then","res","data","task","formData","FormData","console","log","username","append","email","text","post","headers","userToken","status","id","authAPI","password","SET_USER","LOG_OUT","SET_TEXT_EDITED","initialState","textEditedTasks","setUser","type","logoutChannel","BroadcastChannel","userReducer","state","action","tasks","pageNum","sortField","isFetching","totalTaskCount","toggleIsFetching","requestTasks","page","sf","sd","dispatch","a","sort_field","message","total_task_count","taskReducer","reducers","combineReducers","tasksPage","userPage","persistedState","localStorage","getItem","JSON","parse","createStore","applyMiddleware","thunkMiddleware","subscribe","setItem","stringify","getState","Login","useState","showModal","setShowModal","Form","useForm","form","useDispatch","useSelector","length","ghost","onClick","postMessage","title","placement","closable","width","onClose","visible","name","onFinish","values","token","success","error","login","resetFields","Item","label","rules","required","Password","htmlType","TaskCard","currentQueryParams","isEdit","setIsEdit","taskText","setTaskText","setStatus","hoverable","style","height","border","cover","image_path","alt","maxHeight","src","replaceAll","replace","TextArea","value","onChange","e","target","checked","dangerouslySetInnerHTML","__html","span","prev","queryP","editTask","includes","layout","labelCol","wrapperCol","validateMessages","types","number","CreateTaskForm","offset","initialValues","Option","Select","TasksContainer","useEffect","justify","gutter","defaultValue","shape","map","t","xs","md","lg","current","total","pageSize","p","MainPage","loading","className","s","siteLayout","Content","layoutShadow","App","onmessage","event","window","location","reload","close","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7eba0db2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"siteLayout\":\"mainPage_siteLayout__1Zeu0\",\"layoutShadow\":\"mainPage_layoutShadow__1-mUw\"};","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport taskReducer from \"./task/task.reducer\";\r\nimport userReducer from \"./user/user.reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    tasksPage: taskReducer,\r\n    userPage: userReducer\r\n})\r\nconst persistedState = localStorage.getItem('reduxState')?JSON.parse(localStorage.getItem('reduxState')):null;\r\nlet store;\r\nif(persistedState){\r\n    store = createStore(reducers, { ...reducers, userPage:persistedState}, applyMiddleware(thunkMiddleware))\r\n}else{\r\n    store = createStore(reducers, { ...reducers}, applyMiddleware(thunkMiddleware))\r\n}\r\n\r\nstore.subscribe(()=>{\r\n    localStorage.setItem('reduxState', JSON.stringify(store.getState().userPage))\r\n})\r\n\r\nexport default store\r\n","const TASK_ACTION_TYPES = {\r\n    SET_SORT_FIELD: \"SET_SORT_FIELD \",\r\n    SET_SORT_DIRECT: \"SET_SORT_DIRECT\",\r\n    SET_PAGE_NUM: \"SET_PAGE_NUM\",\r\n    SET_TOTAL_TASK_COUNT: 'SET_TOTAL_TASK_COUNT',\r\n    SET_TASKS: \"SET_TASKS\",\r\n    EDIT_TASK: \"EDIT_TASK\",\r\n    TOGGLE_IS_FETCHING:'TOGGLE_IS_FETCHING',\r\n};\r\n\r\nexport default TASK_ACTION_TYPES;\r\n","import * as axios from 'axios'\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://uxcandy.com/~shapoval/test-task-backend/v2/',\r\n});\r\n\r\nexport const tasksAPI = {\r\n    getTasks(currentPage = 1,sort_filed = 'username', sortDr = 'asc') {\r\n        return instance.get(`?developer=Shamshod&sort_field=${sort_filed}&sort_direction=${sortDr}&page=${currentPage}`)\r\n            .then(res => {\r\n                return res.data;\r\n            });\r\n    },\r\n    createTask(task) {\r\n        const formData = new FormData()\r\n        console.log(task.username)\r\n        formData.append('username', task.username)\r\n        formData.append('email', task.email)\r\n        formData.append('text', task.text)\r\n        return instance.post(`create/?developer=Shamshod`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => {\r\n            return res.data\r\n        });\r\n    },\r\n    editTask(task,userToken) {\r\n        const formData = new FormData()\r\n        formData.append('token', userToken)\r\n        formData.append('status', task.status)\r\n        task.text&&formData.append('text', task.text)\r\n        return instance.post(`edit/${task.id}/?developer=Shamshod`,formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => {\r\n            return res.data\r\n        })\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(username, password) {\r\n        const formData = new FormData();\r\n        formData.append('username', username)\r\n        formData.append('password', password)\r\n        return instance.post(`login/?developer=Shamshod`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => {\r\n            return res.data\r\n        });\r\n    }\r\n}\r\n\r\n","import {authAPI} from \"../../api/api\";\r\nimport {message} from \"antd\";\r\nimport {BroadcastChannel} from 'broadcast-channel';\r\n\r\nconst SET_USER = 'SET_USER'\r\nconst LOG_OUT = 'LOG_OUT'\r\nconst SET_TEXT_EDITED = 'SET_TEXT_EDITED'\r\nconst initialState = {\r\n    username: '',\r\n    userToken: '',\r\n    textEditedTasks: []\r\n}\r\n\r\nconst userReducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER:\r\n            return {...state,username: action.username, userToken: action.userToken}\r\n        case LOG_OUT:\r\n            return {...state, username: '', userToken: null, textEditedTasks: []}\r\n        case SET_TEXT_EDITED:\r\n            return {...state, textEditedTasks: [...state.textEditedTasks, action.id]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUser = (username, userToken) => ({\r\n    type: SET_USER, username, userToken\r\n})\r\n\r\nconst logoutChannel = new BroadcastChannel('logout')\r\nconst setLogout = () => ({type: LOG_OUT})\r\nexport const logOut = () => async (dispatch) => {\r\n    await dispatch(setLogout())\r\n    await logoutChannel.postMessage();\r\n}\r\nexport const logoutAllTabsListener = () => {\r\n    logoutChannel.onmessage = event => {\r\n        window.location.reload()\r\n        logoutChannel.close();\r\n    }\r\n};\r\nexport const setTextEdited = (id) => ({type: SET_TEXT_EDITED, id})\r\n\r\nexport const login = (username, password) => async (dispatch) => {\r\n    let res = await authAPI.login(username, password)\r\n    if (res.status === 'ok') {\r\n        dispatch(setUser(username, res.message.token))\r\n        message.success(`Hello ${username}!`)\r\n    } else {\r\n        message.error(\"Invalid username or password. Please, try again\")\r\n    }\r\n}\r\n\r\nexport default userReducer\r\n","import TASK_ACTION_TYPES from \"./task.action-types\";\r\nimport {tasksAPI} from \"../../api/api\";\r\nimport {message} from \"antd\";\r\nimport {setTextEdited} from \"../user/user.reducer\";\r\n\r\n\r\nlet initialState ={\r\n    tasks: [{\r\n        username: '',\r\n        email: '',\r\n        text: '',\r\n        status: 0\r\n    }],\r\n    pageNum: 1,\r\n    sortField: 'username',\r\n    sortDr: 'asc',\r\n    isFetching: false,\r\n    totalTaskCount: 4\r\n}\r\n\r\nconst taskReducer = (state=initialState, action)=>{\r\n    switch (action.type) {\r\n        case TASK_ACTION_TYPES.SET_TASKS:\r\n            return {...state, tasks: action.tasks}\r\n        case TASK_ACTION_TYPES.SET_SORT_FIELD:\r\n            return {...state, sortField: action.sort_field}\r\n        case TASK_ACTION_TYPES.SET_SORT_DIRECT:\r\n            return {...state, sortDr: action.sortDr}\r\n        case TASK_ACTION_TYPES.TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TASK_ACTION_TYPES.SET_PAGE_NUM:\r\n            return {...state, pageNum: action.pageNum}\r\n        case TASK_ACTION_TYPES.SET_TOTAL_TASK_COUNT:\r\n            return {...state, totalTaskCount: action.totalTaskCount}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setSortField = (sort_field) => ({type: TASK_ACTION_TYPES.SET_SORT_FIELD,sort_field})\r\n\r\nconst setSortDirect = (sortDr) => ({type: TASK_ACTION_TYPES.SET_SORT_DIRECT,sortDr})\r\n\r\nconst setPageNum = (pageNum) => ({type: TASK_ACTION_TYPES.SET_PAGE_NUM, pageNum})\r\n\r\nconst setTasks = (tasks) => ({type: TASK_ACTION_TYPES.SET_TASKS, tasks})\r\n\r\nconst toggleIsFetching = (isFetching) => ({type: TASK_ACTION_TYPES.TOGGLE_IS_FETCHING, isFetching})\r\n\r\nconst setTotalTasksCount = (totalTaskCount) => ({type: TASK_ACTION_TYPES.SET_TOTAL_TASK_COUNT, totalTaskCount})\r\n\r\n\r\n\r\n//Thunks\r\nexport const requestTasks = (page,sf,sd) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setPageNum(page));\r\n        dispatch(setSortField(sf));\r\n        dispatch(setSortDirect(sd))\r\n        let data = await tasksAPI.getTasks(page,sf,sd);\r\n        dispatch(setTasks(data.message.tasks));\r\n        dispatch(setTotalTasksCount(data.message.total_task_count));\r\n        dispatch(toggleIsFetching(false));\r\n    }\r\n}\r\n\r\nexport const createTask = (task) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n    let data = await tasksAPI.createTask(task)\r\n        dispatch(toggleIsFetching(false))\r\n        if(data.status === 'ok') {\r\n            dispatch(requestTasks(1,'id','desc'))\r\n            message.success('Task Added')\r\n        } else {\r\n            message.error('Upss, something went wrong!')\r\n        }\r\n    }\r\n}\r\n\r\nexport const editTask = (task, userToken, queryP) => {\r\n    return async (dispatch) => {\r\n        let data = await tasksAPI.editTask(task, userToken)\r\n        if(data.status ==='ok') {\r\n            task.text&&dispatch(setTextEdited(task.id))\r\n            dispatch(requestTasks(queryP.pageNum, queryP.sortField, queryP.sortDr))\r\n            message.success('successfully edited')\r\n        } else {\r\n            message.error('Ups...Unexpected error!')\r\n        }\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n","import React, {useState} from 'react'\r\nimport {Drawer, Button} from 'antd';\r\nimport {Form, Input} from 'antd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login, logOut} from \"../../redux/user/user.reducer\";\r\n\r\nconst Login = () => {\r\n    const [showModal, setShowModal] = useState(false)\r\n    const [form] = Form.useForm();\r\n    const dispatch = useDispatch()\r\n    const onFinish = (values) => {\r\n        dispatch(login(values.username, values.password))\r\n        form.resetFields()\r\n        setShowModal(false)\r\n    };\r\n    const username = useSelector(state => state.userPage.username)\r\n\r\n    return (\r\n        <>\r\n            {username.length > 1 ? <Button type=\"primary\" ghost onClick={() => dispatch(logOut())}>\r\n                logout\r\n            </Button> : <Button type=\"primary\" onClick={() => setShowModal(true)}>\r\n                login\r\n            </Button>}\r\n            <Drawer\r\n                title=\"LogIn\"\r\n                placement={'right'}\r\n                closable={false}\r\n                width={'30%'}\r\n                onClose={() => {\r\n                    setShowModal(false)\r\n                }}\r\n                visible={showModal}\r\n            >\r\n                <Form\r\n                    form={form}\r\n                    name=\"basic\"\r\n                    onFinish={onFinish}\r\n                >\r\n                    <Form.Item\r\n                        label=\"Username\"\r\n                        name=\"username\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your username!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Password\"\r\n                        name=\"password\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your password!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input.Password/>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Drawer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Login\r\n","import React, {useState} from 'react'\r\nimport {Button, Card,Row, Col, Switch, Input} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {editTask} from \"../../redux/task/task.reducer\";\r\n\r\nconst TaskCard = ({task, currentQueryParams}) => {\r\n    const userToken = useSelector(state => state.userPage.userToken)\r\n    const textEditedTasks = useSelector(state => state.userPage.textEditedTasks)\r\n    const dispatch = useDispatch()\r\n    const [isEdit, setIsEdit] = useState(false)\r\n    const [taskText, setTaskText] = useState(task.text)\r\n    const [status, setStatus] = useState(task.status)\r\n    const handleEdit = () => {\r\n        setIsEdit(prev => !prev)\r\n        if(isEdit) {\r\n           taskText.length>0&&dispatch(editTask({id:task.id, text: taskText===task.text?null:taskText, status}, userToken,currentQueryParams))\r\n        }\r\n    }\r\n\r\n\r\n    return <Card\r\n        hoverable\r\n        style={{width: \"100%\", height: \"auto\", border: `4px solid ${task.status===0?'red':'green'}`}}\r\n        cover={task.image_path ?\r\n            <img alt=\"TaskPhoto\" style={{maxHeight: \"160px\"}} src={task.image_path}/> :\r\n            <img alt=\"smallPhoto\" style={{maxHeight: \"160px\"}}\r\n                 src={`https://source.unsplash.com/1600x900/?${task.text}`}/>}\r\n    >\r\n        <h4>username: {task.username.replaceAll(\"&gt;\", \">\").replaceAll(\"&lt;\", \"<\").replace( /(<([^>]+)>)/ig, '')}</h4>\r\n        <br/>\r\n        <h4>email: {task.email}</h4>\r\n        <br/>\r\n        {isEdit?<div>\r\n            <Input.TextArea value={taskText} onChange={(e) => {\r\n                setTaskText(e.target.value)\r\n            }}/>\r\n            Task has done: <Switch checked={status === 10} onChange={() => {\r\n            status === 10 ? setStatus(0) : setStatus(10)\r\n        }} />\r\n        </div>:<div>\r\n            {task.status === 0 ? 'Task is :' : 'Task was :'} <span dangerouslySetInnerHTML={{__html: task.text}}/>\r\n            <hr/>\r\n            <span>status: {task.status === 0 ? 'Let`s do it' : 'It was great job'}</span>\r\n        </div>}\r\n        <br/>\r\n        {userToken&&<Row>\r\n            <Col span={6}>\r\n                <Button type={'primary'} onClick={handleEdit}>{isEdit ? 'Submit' : 'Edit'}</Button>\r\n            </Col>\r\n            <Col span={18}>\r\n                {textEditedTasks.includes(task.id)&&<span>was edited by administrator</span>}\r\n            </Col>\r\n        </Row>}\r\n    </Card>\r\n}\r\n\r\nexport default TaskCard\r\n","import React from 'react'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {createTask} from \"../../redux/task/task.reducer\";\r\nimport  { Col,Form, Input, Button } from 'antd';\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 4,\r\n    },\r\n    wrapperCol: {\r\n        span: 24,\r\n    },\r\n};\r\nconst validateMessages = {\r\n    required: '${label} is required!',\r\n    types: {\r\n        email: '${label} is not a valid email!',\r\n        number: '${label} is not a valid number!',\r\n    },\r\n};\r\n\r\nconst CreateTaskForm = () => {\r\n    const [form] = Form.useForm();\r\n    const dispatch = useDispatch()\r\n    const onFinish = (values) => {\r\n        dispatch(createTask(values))\r\n        form.resetFields()\r\n    };\r\n    return <div>\r\n        <br/>\r\n        <Col offset={8}>\r\n            <h2>Add Your Task</h2>\r\n        </Col>\r\n        <Form {...layout} form={form} initialValues={{username:null, email: null, text: null}} name=\"nest-messages\" onFinish={onFinish} validateMessages={validateMessages}>\r\n            <Form.Item\r\n                name={'username'}\r\n                label={<h3>Name</h3>}\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item\r\n                name='email'\r\n                label={<h3>Email</h3>}\r\n                rules={[\r\n                    {\r\n                        type: 'email',\r\n                        required: true\r\n                    },\r\n                ]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item name={'text'} label={<h3>Text</h3>}\r\n                       rules={[\r\n                           {\r\n                               required: true\r\n                           },\r\n                       ]}\r\n            >\r\n                <Input.TextArea />\r\n            </Form.Item>\r\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 4 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    </div>\r\n}\r\n\r\nexport default CreateTaskForm\r\n","import React, {useEffect} from 'react'\r\nimport  {Pagination,Button, Col,Row,Select } from 'antd'\r\nimport TaskCard from \"./taskCard\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {requestTasks} from \"../../redux/task/task.reducer\";\r\nimport CreateTaskForm from \"./createTaskForm\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst TasksContainer = ( ) => {\r\n    const tasks = useSelector(state => state.tasksPage.tasks)\r\n    const pageNum = useSelector(state => state.tasksPage.pageNum)\r\n    const sortField = useSelector(state => state.tasksPage.sortField)\r\n    const sortDr = useSelector(state => state.tasksPage.sortDr)\r\n    const totalTaskCount = useSelector(state => state.tasksPage.totalTaskCount)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleSortField = (e) => {\r\n        dispatch(requestTasks(pageNum,e,sortDr))\r\n    }\r\n    const handleSortDr = () => {\r\n        let newSortDr = sortDr==='asc'?'desc':'asc'\r\n        dispatch(requestTasks(pageNum,sortField,newSortDr))\r\n    }\r\n\r\n    useEffect(()=>{\r\n        dispatch(requestTasks(1))\r\n    },[dispatch])\r\n\r\n    return <div>\r\n        <Row justify={'center'} gutter={[8, 8]}>\r\n           <Col>\r\n               <h3>You can sort by: </h3>\r\n           </Col>\r\n            <Col>\r\n                <Select defaultValue={sortField} style={{width: 120}} onChange={handleSortField}>\r\n                    <Option value=\"username\">username</Option>\r\n                    <Option value=\"email\">email</Option>\r\n                    <Option value=\"status\">status</Option>\r\n                </Select>\r\n            </Col>\r\n            <Col>\r\n                <h3> and by </h3>\r\n            </Col>\r\n            <Col>\r\n                <Button type={'primary'} shape={'round'} onClick={handleSortDr}>{sortDr === 'asc' ? 'asc' : \"desc\"}</Button>\r\n            </Col>\r\n        </Row>\r\n        <br/>\r\n        <Row justify={'center'} gutter={[8,8]}>\r\n            {tasks.map(t => <Col xs={24} md={12} lg={6}  key={t.id}>\r\n                <TaskCard key={`${t.id} ${t.text}`} task={t} currentQueryParams={{pageNum, sortField, sortDr}}/>\r\n            </Col>)}\r\n            <Col xs={24} md={12} lg={6} >\r\n                <CreateTaskForm/>\r\n            </Col>\r\n        </Row>\r\n        <br/>\r\n        <Row justify={'center'}>\r\n            <Col offset={2}>\r\n                <Pagination current={pageNum} total={totalTaskCount} pageSize={3} onChange={(p) => {\r\n                    dispatch(requestTasks(p, sortField, sortDr))\r\n                }}/>\r\n            </Col>\r\n        </Row>\r\n    </div>\r\n}\r\n\r\nexport default TasksContainer\r\n","import React, {useEffect} from 'react'\r\nimport {useSelector} from \"react-redux\";\r\nimport {Col, Layout, message, Row} from \"antd\";\r\nimport Login from \"../login/login\";\r\nimport TasksContainer from \"../tasks/tasksContainer\";\r\nimport s from './mainPage.module.css'\r\n\r\nconst MainPage = () => {\r\n    const isFetching = useSelector(state => state.tasksPage.isFetching)\r\n    useEffect(() => {\r\n        isFetching && message.loading('Processing', 0.2)\r\n    }, [isFetching])\r\n\r\n    return (\r\n        <Layout className={s.siteLayout}>\r\n            <Layout.Content className={s.layoutShadow}>\r\n               <Row>\r\n                   <Col span={2}>\r\n                       <Login/>\r\n                   </Col>\r\n                   <Col offset={8}>\r\n                       <h1>WELCOME TO TASK-MANAGER</h1>\r\n                   </Col>\r\n                   <TasksContainer/>\r\n               </Row>\r\n            </Layout.Content>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default MainPage","import React, {useEffect} from 'react'\r\nimport 'antd/dist/antd.css';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport MainPage from \"./components/mainPage/mainPage\";\r\nimport './App.css'\r\nimport {logoutAllTabsListener} from \"./redux/user/user.reducer\";\r\n\r\nfunction App() {\r\n    useEffect(()=>{\r\n        logoutAllTabsListener()\r\n    },[])\r\n  return (\r\n      <div>\r\n          <Provider store={store}>\r\n              <MainPage/>\r\n          </Provider>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}